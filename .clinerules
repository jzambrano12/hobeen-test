# Cline's Rules & Learnings for Rick & Morty App

## Project Overview

- **Type:** React Native mobile application for a technical test.
- **Core Task:** Fetch and display data from the Rick & Morty API (characters, details, search).
- **Key Technologies:** React Native, Expo, TypeScript, React Navigation.
- **User Instructions:** Clean code, best practices, no AI comments, integration tests.

## Initial Setup & Memory Bank

- The Memory Bank (MB) is crucial. All core MB files (`projectbrief.md`, `productContext.md`, `activeContext.md`, `systemPatterns.md`, `techContext.md`, `progress.md`) must be created/maintained.
- This `.clinerules` file is part of that core documentation.
- Always read ALL MB files at the start of a session.

## Development Patterns & Preferences (To be discovered/updated)

- **API Interaction:**
  - A custom hook (`useApiData` or similar) is a bonus requirement and a good pattern for managing API calls (loading, error, data states).
  - The API supports pagination (`/character?page=X`). This should be used for the character list.
  - Character details require fetching the character by ID, and then potentially fetching episode names if only episode URLs are provided in the character data. (Confirmed: Character data includes `episode` (an array of episode URLs). Need to fetch episode details from these URLs or by parsing IDs from them to get names).
  - Search is done via query parameter: `/character/?name=searchValue`.
- **Navigation:**
  - React Navigation is specified. A stack navigator for List -> Detail seems appropriate.
  - Params will need to be passed (e.g., character ID to the detail screen).
- **Styling:**
  - Default to `StyleSheet` from React Native.
  - Maintain consistency.
- **TypeScript:**
  - Use throughout. Define interfaces for API responses (Character, Episode, Location, Origin, APIResponseInfo) and component props.
- **File Structure (Initial thoughts, to be refined):**
  - `app/` (Expo router convention)
    - `(tabs)` or similar for main navigation structure if using tabs, or direct screens if simpler stack.
    - `screens/` (if not using Expo file-based routing strictly for screens)
      - `CharacterListScreen.tsx`
      - `CharacterDetailScreen.tsx`
  - `components/`
    - `ui/` (for very generic UI bits)
    - `CharacterCard.tsx`
    - `SearchInput.tsx`
    - `LoadingIndicator.tsx`
    - `ErrorMessage.tsx`
  - `hooks/`
    - `useApiData.ts`
  - `services/` or `api/`
    - `rickAndMortyAPI.ts` (functions to interact with the API, type definitions)
  - `types/`
    - `index.ts` (or domain-specific type files like `character.ts`, `episode.ts`)
  - `navigation/`
    - `index.tsx` (navigator setup)
    - `types.ts` (navigation-specific types like screen params)
  - `__tests__/`
    - `integration/`
    - `unit/` (if any)

## User Preferences & Constraints

- **No AI Comments:** Avoid comments like "// Generated by AI".
- **Clean Code:** Follow SOLID, DRY, KISS principles.
- **Best Practices:** Adhere to React Native community best practices.
- **Integration Tests:** Required. Plan for using React Native Testing Library.
- **APK Compilation:** Not an immediate priority.

## Workflow Notes

- PLAN MODE: Gather info, create/update MB, present plan.
- ACT MODE: Implement plan, update MB with changes, update `.clinerules` with learnings.
- Always confirm tool success before proceeding.
- Pay attention to auto-formatting changes provided by the user's editor.

## Things to Clarify/Confirm with User (if needed later)

- Specific UI/UX preferences beyond "clean and intuitive".
- Depth of integration testing required.
- Any preference between `fetch` and `axios` (defaulting to `fetch` for now).

_(This file will be updated as the project progresses and new patterns or insights are discovered.)_
